cor(c(1,2),c(-1,2))
?cor
# Cargar el archivo CSV
ciudades <- read.csv2("C:/Users/dofca/Downloads/ciudades.csv")
# Selección de las columnas para las cuales se desea la distancia de Mahalanobis
data = subset(ciudades, select = c(Rel.al.prof, Analfabetismo))
rownames(data) = ciudades$CIUDADES
data
as.numeric(data[which(rownames(data) == "Riohacha"),])
as.numeric(data[which(rownames(data) ==
"San Andres"),]
)
data
mahalanobis(data,unlist(data[1, ]), cov(data))
cor(as.numeric(data[which(rownames(data) == "Riohacha"),]), as.numeric(data[which(rownames(data) ==
"San Andres"),]))
cor(c(1,2))
cor(ciudades)
ciudades <- read_excel("datos/ciudades original-filtrado-con etiquetas.xlsx")
ciudades <- ciudades |> dplyr::select(dplyr::starts_with(c("CYT", "INFRA", "FIN")))
cor.mat <- cor(ciudades[,1:5])
max.cor <- max(abs(cor.mat[lower.tri(cor.mat)]))
min.cor <- min(abs(cor.mat[lower.tri(cor.mat)]))
which(abs(cor.mat) == max.cor, arr.ind = TRUE)
which(abs(cor.mat) == min.cor, arr.ind = TRUE)
cor.mat <- cor(ciudades[,1:5])
max.cor <- max(abs(cor.mat[lower.tri(cor.mat)]))
min.cor <- min(abs(cor.mat[lower.tri(cor.mat)]))
which(abs(cor.mat) == max.cor, arr.ind = TRUE)
which(abs(cor.mat) == min.cor, arr.ind = TRUE)
ciudades1 <- ciudades[c("CYT_20","CYT_21")]
ciudades1
ciudades
ciudades <- read_excel("datos/ciudades original-filtrado-con etiquetas.xlsx")
ciudades
class(ciudades)
as.matrix(ciudades)
ciudades <- read_excel("datos/ciudades original-filtrado-con etiquetas.xlsx")
ciudades <- ciudades |> dplyr::select(dplyr::starts_with(c("CYT", "INFRA", "FIN")))
as.matrix(ciudades)
ciudades <- as.matrix(ciudades)
ciudades[,c("CYT_20")]
ciudades <- read_excel("datos/ciudades original-filtrado-con etiquetas.xlsx")
ciudades <- ciudades |> dplyr::select(dplyr::starts_with(c("CYT", "INFRA", "FIN")))
cor.mat <- cor(ciudades[,1:5])
max.cor <- max(abs(cor.mat[lower.tri(cor.mat)]))
min.cor <- min(abs(cor.mat[lower.tri(cor.mat)]))
which(abs(cor.mat) == max.cor, arr.ind = TRUE)
which(abs(cor.mat) == min.cor, arr.ind = TRUE)
cor.mat <- cor(ciudades[,6:15])
max.cor <- max(abs(cor.mat[lower.tri(cor.mat)]))
min.cor <- min(abs(cor.mat[lower.tri(cor.mat)]))
which(abs(cor.mat) == max.cor, arr.ind = TRUE)
which(abs(cor.mat) == min.cor, arr.ind = TRUE)
cor.mat <- cor(ciudades[,16:23])
max.cor <- max(abs(cor.mat[lower.tri(cor.mat)]))
min.cor <- min(abs(cor.mat[lower.tri(cor.mat)]))
which(abs(cor.mat) == max.cor, arr.ind = TRUE)
which(abs(cor.mat) == min.cor, arr.ind = TRUE)
ciudades2 <- as.matrix(ciudades)
ciudades <- read_excel("datos/ciudades original-filtrado-con etiquetas.xlsx")
ciudades2 <- ciudades |> dplyr::select(dplyr::starts_with(c("CYT", "INFRA", "FIN")))
ciudades2 <- as.matrix(ciudades2)
ciudades2
rownames(ciudades2) <- ciudades$CIUDADES
ciudades2
ciudades[,c("CYT_20","CYT_21")]
ciudades2[,c("CYT_20","CYT_21")]
distancia1 <- ciudades2[,c("CYT_20","CYT_21")]
distancia1 <- ciudades2[,c("CYT_20","CYT_21")]
mahalanobis_entre_SA_Rio1 <- mahalanobis(as.numeric(data[which(rownames(data) ==
"San Arés"),]),
as.numeric(data[which(rownames(data) ==
"Riohacha"),]),
cov(distancia1))
mahalanobis_entre_SA_Rio1
mahalanobis_entre_SA_Rio1 <- mahalanobis(as.numeric(data[which(rownames(distancia1) ==
"San Arés"),]),
as.numeric(data[which(rownames(distancia1) ==
"Riohacha"),]),
cov(distancia1))
mahalanobis_entre_SA_Rio1
# Función para calcular la distancia de Mahalanobis y graficar
calcular_mahalanobis <- function(ciudades, var1, var2, ciudad1, ciudad2, resultados) {
# Selección de las variables
data <- subset(ciudades, select = c(var1, var2))
rownames(data) <- ciudades$CIUDADES
# Cálculo de la distancia entre las dos ciudades
dist_mahalanobis <- mahalanobis(as.numeric(data[which(rownames(data) == ciudad1),]),
as.numeric(data[which(rownames(data) == ciudad2),]),
cov(data))
# Cálculo de la distancia de Mahalanobis respecto a la media
dist_media <- mahalanobis(data[which(rownames(data) == ciudad1 | rownames(data) == ciudad2),],
colMeans(data), cov(data))
# Agregar los resultados a la tabla
resultados <- rbind(resultados, data.frame(
Ciudad1 = ciudad1,
Ciudad2 = ciudad2,
Distancia_Mahal = dist_mahalanobis,
Distancia_Media = dist_media,
Variables = paste(var1, var2, sep = " & ")
))
# Mostrar distancias
print(paste("Distancia Mahalanobis entre", ciudad1, "y", ciudad2, ": ", dist_mahalanobis))
print(paste("Distancia Mahalanobis respecto a la media: ", dist_media))
# Graficar
xbar <- colMeans(data)
plot(ciudades[[var1]], ciudades[[var2]],
xlab = var1, ylab = var2, main = paste("Gráfico de", var1, "vs", var2),
xlim = c(min(ciudades[[var1]]), max(ciudades[[var1]])),
ylim = c(min(ciudades[[var2]]), max(ciudades[[var2]])))
# Añadir las etiquetas de las ciudades
text(ciudades[[var1]], ciudades[[var2]], ciudades$CIUDADES, cex = 0.5, pos = 3)
# Dibujar líneas de la media
abline(h = xbar[2], col = "orange", lty = 2)
abline(v = xbar[1], col = "orange", lty = 2)
# Etiqueta para la media
text(xbar[1] - 0.2, xbar[2] - 0.02,
labels = expression(bar(x) ~ "y" ~ bar(y)),
col = "purple", cex = 0.7, font = 1, las = 2)
# Devolver los resultados actualizados
return(resultados)
}
# Cargar archivo y datos
archivo <- "datos/ciudades original-filtrado-con etiquetas - copia.xlsx"
ciudades <- read_excel(archivo)
#| output: false
library(readxl)
library(tm)
library(wordcloud)
library(SnowballC)
library(readr)
library(tidyverse)
library(lattice)
library(MASS)
library(latex2exp)
library(bestNormalize)
library(gt)
library(gtExtras)
library(dplyr)
library(ggplot2)
library(htmlwidgets)
library(kableExtra)
options(scipen = 999)
# Función para calcular la distancia de Mahalanobis y graficar
calcular_mahalanobis <- function(ciudades, var1, var2, ciudad1, ciudad2, resultados) {
# Selección de las variables
data <- subset(ciudades, select = c(var1, var2))
rownames(data) <- ciudades$CIUDADES
# Cálculo de la distancia entre las dos ciudades
dist_mahalanobis <- mahalanobis(as.numeric(data[which(rownames(data) == ciudad1),]),
as.numeric(data[which(rownames(data) == ciudad2),]),
cov(data))
# Cálculo de la distancia de Mahalanobis respecto a la media
dist_media <- mahalanobis(data[which(rownames(data) == ciudad1 | rownames(data) == ciudad2),],
colMeans(data), cov(data))
# Agregar los resultados a la tabla
resultados <- rbind(resultados, data.frame(
Ciudad1 = ciudad1,
Ciudad2 = ciudad2,
Distancia_Mahal = dist_mahalanobis,
Distancia_Media = dist_media,
Variables = paste(var1, var2, sep = " & ")
))
# Mostrar distancias
print(paste("Distancia Mahalanobis entre", ciudad1, "y", ciudad2, ": ", dist_mahalanobis))
print(paste("Distancia Mahalanobis respecto a la media: ", dist_media))
# Graficar
xbar <- colMeans(data)
plot(ciudades[[var1]], ciudades[[var2]],
xlab = var1, ylab = var2, main = paste("Gráfico de", var1, "vs", var2),
xlim = c(min(ciudades[[var1]]), max(ciudades[[var1]])),
ylim = c(min(ciudades[[var2]]), max(ciudades[[var2]])))
# Añadir las etiquetas de las ciudades
text(ciudades[[var1]], ciudades[[var2]], ciudades$CIUDADES, cex = 0.5, pos = 3)
# Dibujar líneas de la media
abline(h = xbar[2], col = "orange", lty = 2)
abline(v = xbar[1], col = "orange", lty = 2)
# Etiqueta para la media
text(xbar[1] - 0.2, xbar[2] - 0.02,
labels = expression(bar(x) ~ "y" ~ bar(y)),
col = "purple", cex = 0.7, font = 1, las = 2)
# Devolver los resultados actualizados
return(resultados)
}
# Cargar archivo y datos
archivo <- "datos/ciudades original-filtrado-con etiquetas - copia.xlsx"
ciudades <- read_excel(archivo)
# Crear una tabla vacía para almacenar los resultados
resultados <- data.frame(Ciudad1 = character(0), Ciudad2 = character(0),
Distancia_Mahal = numeric(0), Distancia_Media = numeric(0),
Variables = character(0))
# Llamar a la función para diferentes combinaciones de variables y ciudades, y almacenar los resultados
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Bogotá, D.C.", "Pereira", resultados)
# Mostrar la tabla con todas las distancias calculadas
print(resultados)
ciudades
tail(ciudades)
# Cargar archivo y datos
archivo <- "datos/ciudades original-filtrado-con etiquetas - copia.xlsx"
ciudades <- read_excel(archivo)
ciudades[ciudades[ciudades$CIUDADES=="San Arés",]] == "San Andres"
#| output: false
library(readxl)
library(tm)
library(wordcloud)
library(SnowballC)
library(readr)
library(tidyverse)
library(lattice)
library(MASS)
library(latex2exp)
library(bestNormalize)
library(gt)
library(gtExtras)
library(dplyr)
library(ggplot2)
library(htmlwidgets)
library(kableExtra)
options(scipen = 999)
# Función para calcular la distancia de Mahalanobis y graficar
calcular_mahalanobis <- function(ciudades, var1, var2, ciudad1, ciudad2, resultados) {
# Selección de las variables
data <- subset(ciudades, select = c(var1, var2))
rownames(data) <- ciudades$CIUDADES
# Cálculo de la distancia entre las dos ciudades
dist_mahalanobis <- mahalanobis(as.numeric(data[which(rownames(data) == ciudad1),]),
as.numeric(data[which(rownames(data) == ciudad2),]),
cov(data))
# Cálculo de la distancia de Mahalanobis respecto a la media
dist_media <- mahalanobis(data[which(rownames(data) == ciudad1 | rownames(data) == ciudad2),],
colMeans(data), cov(data))
# Agregar los resultados a la tabla
resultados <- rbind(resultados, data.frame(
Ciudad1 = ciudad1,
Ciudad2 = ciudad2,
Distancia_Mahal = dist_mahalanobis,
Distancia_Media = dist_media,
Variables = paste(var1, var2, sep = " & ")
))
# Mostrar distancias
print(paste("Distancia Mahalanobis entre", ciudad1, "y", ciudad2, ": ", dist_mahalanobis))
print(paste("Distancia Mahalanobis respecto a la media: ", dist_media))
# Graficar
xbar <- colMeans(data)
plot(ciudades[[var1]], ciudades[[var2]],
xlab = var1, ylab = var2, main = paste("Gráfico de", var1, "vs", var2),
xlim = c(min(ciudades[[var1]]), max(ciudades[[var1]])),
ylim = c(min(ciudades[[var2]]), max(ciudades[[var2]])))
# Añadir las etiquetas de las ciudades
text(ciudades[[var1]], ciudades[[var2]], ciudades$CIUDADES, cex = 0.5, pos = 3)
# Dibujar líneas de la media
abline(h = xbar[2], col = "orange", lty = 2)
abline(v = xbar[1], col = "orange", lty = 2)
# Etiqueta para la media
text(xbar[1] - 0.2, xbar[2] - 0.02,
labels = expression(bar(x) ~ "y" ~ bar(y)),
col = "purple", cex = 0.7, font = 1, las = 2)
# Devolver los resultados actualizados
return(resultados)
}
# Cargar archivo y datos
archivo <- "datos/ciudades original-filtrado-con etiquetas - copia.xlsx"
ciudades <- read_excel(archivo)
ciudades[ciudades[ciudades$CIUDADES=="San Arés",]] == "San Andres"
ciudades[ciudades[ciudades$CIUDADES=="San Arés",]]
ciudades[ciudades[ciudades$CIUDADES=="San Arés",]]
ciudades[ciudades$CIUDADES=="San Arés",]
ciudades[ciudades$CIUDADES=="San Arés",1]
ciudades[ciudades[ciudades$CIUDADES=="San Arés",1]] == "San Andres"
ciudades[ciudades[ciudades$CIUDADES=="San Arés",1]]
ciudades[ciudades$CIUDADES=="San Arés",1]
ciudades[ciudades[ciudades$CIUDADES=="San Arés",1]] <-  "San Andres"
ciudades[ciudades[ciudades$CIUDADES=="San Arés",1]]
ciudades[ciudades$CIUDADES=="San Arés",1]
ciudades[ciudades$CIUDADES=="San Arés",1]
ciudades[ciudades$CIUDADES=="San Arés",1] <-  "San Andres"
tail(ciudades)
# Crear una tabla vacía para almacenar los resultados
resultados <- data.frame(Ciudad1 = character(0), Ciudad2 = character(0),
Distancia_Mahal = numeric(0), Distancia_Media = numeric(0),
Variables = character(0))
# Llamar a la función para diferentes combinaciones de variables y ciudades, y almacenar los resultados
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Bogotá, D.C.", "Pereira", resultados)
# Mostrar la tabla con todas las distancias calculadas
print(resultados)
# Mostrar la tabla con todas las distancias calculadas
print(resultados)
# Función para calcular la distancia de Mahalanobis y graficar
calcular_mahalanobis <- function(ciudades, var1, var2, ciudad1, ciudad2, resultados) {
# Selección de las variables
data <- subset(ciudades, select = c(var1, var2))
rownames(data) <- ciudades$CIUDADES
# Cálculo de la distancia entre las dos ciudades
dist_mahalanobis <- mahalanobis(as.numeric(data[which(rownames(data) == ciudad1),]),
as.numeric(data[which(rownames(data) == ciudad2),]),
cov(data))
# Cálculo de la distancia de Mahalanobis respecto a la media
dist_media <- mahalanobis(data[which(rownames(data) == ciudad1 | rownames(data) == ciudad2),],
colMeans(data), cov(data))
# Agregar los resultados a la tabla
resultados <- rbind(resultados, data.frame(
Ciudad1 = ciudad1,
Ciudad2 = ciudad2,
Distancia_Mahal = dist_mahalanobis,
Distancia_Media = dist_media,
Variables = paste(var1, var2, sep = " & ")
))
# Mostrar distancias
print(paste("Distancia Mahalanobis entre", ciudad1, "y", ciudad2, ": ", dist_mahalanobis))
print(paste("Distancia Mahalanobis de",ciudad1,"respecto a la media: ", dist_media[1]))
print(paste("Distancia Mahalanobis de",ciudad2,"respecto a la media: ", dist_media[2]))
# Graficar
xbar <- colMeans(data)
plot(ciudades[[var1]], ciudades[[var2]],
xlab = var1, ylab = var2, main = paste("Gráfico de", var1, "vs", var2),
xlim = c(min(ciudades[[var1]]), max(ciudades[[var1]])),
ylim = c(min(ciudades[[var2]]), max(ciudades[[var2]])))
# Añadir las etiquetas de las ciudades
text(ciudades[[var1]], ciudades[[var2]], ciudades$CIUDADES, cex = 0.5, pos = 3)
# Dibujar líneas de la media
abline(h = xbar[2], col = "orange", lty = 2)
abline(v = xbar[1], col = "orange", lty = 2)
# Etiqueta para la media
text(xbar[1] - 0.2, xbar[2] - 0.02,
labels = expression(bar(x) ~ "y" ~ bar(y)),
col = "purple", cex = 0.7, font = 1, las = 2)
# Devolver los resultados actualizados
return(resultados)
}
# Cargar archivo y datos
archivo <- "datos/ciudades original-filtrado-con etiquetas - copia.xlsx"
ciudades <- read_excel(archivo)
ciudades[ciudades$CIUDADES=="San Arés",1] <-  "San Andres"
# Crear una tabla vacía para almacenar los resultados
resultados <- data.frame(Ciudad1 = character(0), Ciudad2 = character(0),
Distancia_Mahal = numeric(0), Distancia_Media = numeric(0),
Variables = character(0))
# Llamar a la función para diferentes combinaciones de variables y ciudades, y almacenar los resultados
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Bogotá, D.C.", "Pereira", resultados)
resultados
#| output: false
library(readxl)
library(tm)
library(wordcloud)
library(SnowballC)
library(readr)
library(tidyverse)
library(lattice)
library(MASS)
library(latex2exp)
library(bestNormalize)
library(gt)
library(gtExtras)
library(dplyr)
library(ggplot2)
library(htmlwidgets)
library(kableExtra)
options(scipen = 999)
# Función para calcular la distancia de Mahalanobis y graficar
calcular_mahalanobis <- function(ciudades, var1, var2, ciudad1, ciudad2, resultados) {
# Selección de las variables
data <- subset(ciudades, select = c(var1, var2))
rownames(data) <- ciudades$CIUDADES
# Cálculo de la distancia entre las dos ciudades
dist_mahalanobis <- mahalanobis(as.numeric(data[which(rownames(data) == ciudad1),]),
as.numeric(data[which(rownames(data) == ciudad2),]),
cov(data))
# Cálculo de la distancia de Mahalanobis respecto a la media
dist_media <- mahalanobis(data[which(rownames(data) == ciudad1 | rownames(data) == ciudad2),],
colMeans(data), cov(data))
# Agregar los resultados a la tabla
resultados <- rbind(resultados, data.frame(
Ciudad1 = ciudad1,
Ciudad2 = ciudad2,
Distancia_Mahal = dist_mahalanobis,
Distancia_media_ciudad1 = dist_media[1],
Distancia_media_ciudad2 = dist_media[2],
Variables = paste(var1, var2, sep = " & ")
))
# Mostrar distancias
print(paste("Distancia Mahalanobis entre", ciudad1, "y", ciudad2, ": ", dist_mahalanobis))
print(paste("Distancia Mahalanobis de",ciudad1,"respecto a la media: ", Distancia_media_ciudad1))
print(paste("Distancia Mahalanobis de",ciudad2,"respecto a la media: ", Distancia_media_ciudad2))
# Graficar
xbar <- colMeans(data)
plot(ciudades[[var1]], ciudades[[var2]],
xlab = var1, ylab = var2, main = paste("Gráfico de", var1, "vs", var2),
xlim = c(min(ciudades[[var1]]), max(ciudades[[var1]])),
ylim = c(min(ciudades[[var2]]), max(ciudades[[var2]])))
# Añadir las etiquetas de las ciudades
text(ciudades[[var1]], ciudades[[var2]], ciudades$CIUDADES, cex = 0.5, pos = 3)
# Dibujar líneas de la media
abline(h = xbar[2], col = "orange", lty = 2)
abline(v = xbar[1], col = "orange", lty = 2)
# Etiqueta para la media
text(xbar[1] - 0.2, xbar[2] - 0.02,
labels = expression(bar(x) ~ "y" ~ bar(y)),
col = "purple", cex = 0.7, font = 1, las = 2)
# Devolver los resultados actualizados
return(resultados)
}
# Cargar archivo y datos
archivo <- "datos/ciudades original-filtrado-con etiquetas - copia.xlsx"
ciudades <- read_excel(archivo)
ciudades[ciudades$CIUDADES=="San Arés",1] <-  "San Andres"
# Crear una tabla vacía para almacenar los resultados
resultados <- data.frame(Ciudad1 = character(0), Ciudad2 = character(0),
Distancia_Mahal = numeric(0), Distancia_Media_ciudad1 = numeric(0),
Distancia_Media_ciudad2 = numeric(0),
Variables = character(0))
# Llamar a la función para diferentes combinaciones de variables y ciudades, y almacenar los resultados
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Riohacha", "San Andres", resultados)
# Función para calcular la distancia de Mahalanobis y graficar
calcular_mahalanobis <- function(ciudades, var1, var2, ciudad1, ciudad2, resultados) {
# Selección de las variables
data <- subset(ciudades, select = c(var1, var2))
rownames(data) <- ciudades$CIUDADES
# Cálculo de la distancia entre las dos ciudades
dist_mahalanobis <- mahalanobis(as.numeric(data[which(rownames(data) == ciudad1),]),
as.numeric(data[which(rownames(data) == ciudad2),]),
cov(data))
# Cálculo de la distancia de Mahalanobis respecto a la media
dist_media <- mahalanobis(data[which(rownames(data) == ciudad1 | rownames(data) == ciudad2),],
colMeans(data), cov(data))
# Agregar los resultados a la tabla
resultados <- rbind(resultados, data.frame(
Ciudad1 = ciudad1,
Ciudad2 = ciudad2,
Distancia_Mahal = dist_mahalanobis,
Distancia_media_ciudad1 = dist_media[1],
Distancia_media_ciudad2 = dist_media[2],
Variables = paste(var1, var2, sep = " & ")
))
# Mostrar distancias
print(paste("Distancia Mahalanobis entre", ciudad1, "y", ciudad2, ": ", dist_mahalanobis))
print(paste("Distancia Mahalanobis de",ciudad1,"respecto a la media: ", dist_media[1]))
print(paste("Distancia Mahalanobis de",ciudad2,"respecto a la media: ", dist_media[2]))
# Graficar
xbar <- colMeans(data)
plot(ciudades[[var1]], ciudades[[var2]],
xlab = var1, ylab = var2, main = paste("Gráfico de", var1, "vs", var2),
xlim = c(min(ciudades[[var1]]), max(ciudades[[var1]])),
ylim = c(min(ciudades[[var2]]), max(ciudades[[var2]])))
# Añadir las etiquetas de las ciudades
text(ciudades[[var1]], ciudades[[var2]], ciudades$CIUDADES, cex = 0.5, pos = 3)
# Dibujar líneas de la media
abline(h = xbar[2], col = "orange", lty = 2)
abline(v = xbar[1], col = "orange", lty = 2)
# Etiqueta para la media
text(xbar[1] - 0.2, xbar[2] - 0.02,
labels = expression(bar(x) ~ "y" ~ bar(y)),
col = "purple", cex = 0.7, font = 1, las = 2)
# Devolver los resultados actualizados
return(resultados)
}
# Cargar archivo y datos
archivo <- "datos/ciudades original-filtrado-con etiquetas - copia.xlsx"
ciudades <- read_excel(archivo)
ciudades[ciudades$CIUDADES=="San Arés",1] <-  "San Andres"
# Crear una tabla vacía para almacenar los resultados
resultados <- data.frame(Ciudad1 = character(0), Ciudad2 = character(0),
Distancia_Mahal = numeric(0), Distancia_Media_ciudad1 = numeric(0),
Distancia_Media_ciudad2 = numeric(0),
Variables = character(0))
# Llamar a la función para diferentes combinaciones de variables y ciudades, y almacenar los resultados
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Riohacha", "San Andres", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_20", "CYT_21", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "CYT_18", "CYT_19", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_27", "INFRA_28", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "INFRA_25", "INFRA_30", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_41", "FIN_43", "Bogotá, D.C.", "Pereira", resultados)
resultados <- calcular_mahalanobis(ciudades, "FIN_39", "FIN_44", "Bogotá, D.C.", "Pereira", resultados)
resultados |> gt() |> gtExtras::gt_theme_538()
